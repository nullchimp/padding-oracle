import cipher
from multiprocessing import Process, Queue, Manager


def read_queue(q, plaintext):
    while True:
        idx, data = q.get()
        plaintext[idx] = data

        br = True
        for pt in plaintext:
            if pt == b'':
                br = False
                break

        if br:
            break


def extract_blocks(cipher, block_size=16):
    cipher_range = len(cipher) // block_size
    return [cipher[i*block_size:(i+1)*block_size] for i in range(cipher_range)]


def find_blocks(q, process_index, blocks):
    block_size = len(blocks[0])
    plaintext_block = bytearray([0 for _ in range(block_size)])

    for i in range(block_size):
        idx = block_size - i - 1

        padding = bytearray([0 for _ in range(idx + 1)] + [(i + 1) for _ in range(i)])
        prime_block = [a ^ b ^ c for a, b, c, in zip(plaintext_block, blocks[0], padding)]

        next_byte = prime_block[idx]+1
        for byte in list(range(next_byte, 256)) + list(range(0, next_byte)):
            prime_block[idx] = byte

            testing_cipher = bytes(prime_block) + blocks[1]
            if cipher.is_valid(testing_cipher):
                plaintext_block[idx] = byte ^ blocks[0][idx] ^ (i + 1)
                print(bytes([b for b in plaintext_block if b > block_size]))
                break
        print("NEXT")

    q.put((process_index, bytes([b for b in plaintext_block])))


def find_plaintext(cipher_text):
    with Manager() as manager:
        blocks = extract_blocks(cipher_text)
        plaintext_blocks = manager.list([b'' for _ in range(len(blocks) - 1)])

        q = Queue()
        p = Process(target=read_queue, args=(q, plaintext_blocks))
        p.start()

        processes = [p]

        print(cipher_text)
        print(blocks)

        for i in range(len(blocks)-1):
            p = Process(target=find_blocks, args=(q, i, blocks[i:(i+2)]))
            p.start()

            processes.append(p)

        for p in processes:
            p.join()

        return b''.join([pt for pt in plaintext_blocks])


if __name__ == '__main__':
    cipher_text = cipher.obtain()
    print(find_plaintext(cipher_text))
